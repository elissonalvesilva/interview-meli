// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dna_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNAServiceAnalyzerClient is the client API for DNAServiceAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNAServiceAnalyzerClient interface {
	Analyze(ctx context.Context, in *DNARequest, opts ...grpc.CallOption) (*DNAResponse, error)
}

type dNAServiceAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewDNAServiceAnalyzerClient(cc grpc.ClientConnInterface) DNAServiceAnalyzerClient {
	return &dNAServiceAnalyzerClient{cc}
}

func (c *dNAServiceAnalyzerClient) Analyze(ctx context.Context, in *DNARequest, opts ...grpc.CallOption) (*DNAResponse, error) {
	out := new(DNAResponse)
	err := c.cc.Invoke(ctx, "/dna_pb.DNAServiceAnalyzer/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNAServiceAnalyzerServer is the server API for DNAServiceAnalyzer service.
// All implementations must embed UnimplementedDNAServiceAnalyzerServer
// for forward compatibility
type DNAServiceAnalyzerServer interface {
	Analyze(context.Context, *DNARequest) (*DNAResponse, error)
	mustEmbedUnimplementedDNAServiceAnalyzerServer()
}

// UnimplementedDNAServiceAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedDNAServiceAnalyzerServer struct {
}

func (UnimplementedDNAServiceAnalyzerServer) Analyze(context.Context, *DNARequest) (*DNAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedDNAServiceAnalyzerServer) mustEmbedUnimplementedDNAServiceAnalyzerServer() {}

// UnsafeDNAServiceAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNAServiceAnalyzerServer will
// result in compilation errors.
type UnsafeDNAServiceAnalyzerServer interface {
	mustEmbedUnimplementedDNAServiceAnalyzerServer()
}

func RegisterDNAServiceAnalyzerServer(s grpc.ServiceRegistrar, srv DNAServiceAnalyzerServer) {
	s.RegisterService(&DNAServiceAnalyzer_ServiceDesc, srv)
}

func _DNAServiceAnalyzer_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNAServiceAnalyzerServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dna_pb.DNAServiceAnalyzer/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNAServiceAnalyzerServer).Analyze(ctx, req.(*DNARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DNAServiceAnalyzer_ServiceDesc is the grpc.ServiceDesc for DNAServiceAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNAServiceAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dna_pb.DNAServiceAnalyzer",
	HandlerType: (*DNAServiceAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _DNAServiceAnalyzer_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dna_message.proto",
}
